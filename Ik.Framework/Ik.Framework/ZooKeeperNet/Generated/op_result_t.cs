// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

using System;
using Org.Apache.Jute;

namespace Org.Apache.Zookeeper.Proto
{
public class op_result_t : IRecord, IComparable 
{
  public op_result_t() {
  }
  public op_result_t(
  int rc
,
  int op
,
  byte[] response
) {
Rc=rc;
Op=op;
Response=response;
  }
  public int Rc { get; set; } 
  public int Op { get; set; } 
  public byte[] Response { get; set; } 
  public void Serialize(IOutputArchive a_, String tag) {
    a_.StartRecord(this,tag);
    a_.WriteInt(Rc,"rc");
    a_.WriteInt(Op,"op");
    a_.WriteBuffer(Response,"response");
    a_.EndRecord(this,tag);
  }
  public void Deserialize(IInputArchive a_, String tag) {
    a_.StartRecord(tag);
    Rc=a_.ReadInt("rc");
    Op=a_.ReadInt("op");
    Response=a_.ReadBuffer("response");
    a_.EndRecord(tag);
}
  public override String ToString() {
    try {
      System.IO.MemoryStream ms = new System.IO.MemoryStream();
      IkZooKeeperNet.IO.EndianBinaryWriter writer =
        new IkZooKeeperNet.IO.EndianBinaryWriter(IkZooKeeperNet.IO.EndianBitConverter.Big, ms, System.Text.Encoding.UTF8);
      BinaryOutputArchive a_ = 
        new BinaryOutputArchive(writer);
      a_.StartRecord(this,"");
    a_.WriteInt(Rc,"rc");
    a_.WriteInt(Op,"op");
    a_.WriteBuffer(Response,"response");
      a_.EndRecord(this,"");
      ms.Position = 0;
      return System.Text.Encoding.UTF8.GetString(ms.ToArray());
    } catch (Exception ex) {
      Console.WriteLine(ex.StackTrace);
    }
    return "ERROR";
  }
  public void Write(IkZooKeeperNet.IO.EndianBinaryWriter writer) {
    BinaryOutputArchive archive = new BinaryOutputArchive(writer);
    Serialize(archive, "");
  }
  public void ReadFields(IkZooKeeperNet.IO.EndianBinaryReader reader) {
    BinaryInputArchive archive = new BinaryInputArchive(reader);
    Deserialize(archive, "");
  }
  public int CompareTo (object peer_) {
    if (!(peer_ is op_result_t)) {
      throw new InvalidOperationException("Comparing different types of records.");
    }
    op_result_t peer = (op_result_t) peer_;
    int ret = 0;
    ret = (Rc == peer.Rc)? 0 :((Rc<peer.Rc)?-1:1);
    if (ret != 0) return ret;
    ret = (Op == peer.Op)? 0 :((Op<peer.Op)?-1:1);
    if (ret != 0) return ret;
    ret = Response.CompareTo(peer.Response);
    if (ret != 0) return ret;
     return ret;
  }
  public override bool Equals(object peer_) {
    if (!(peer_ is op_result_t)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    bool ret = false;
    op_result_t peer = (op_result_t)peer_;
    ret = (Rc==peer.Rc);
    if (!ret) return ret;
    ret = (Op==peer.Op);
    if (!ret) return ret;
    ret = Response.Equals(peer.Response);
    if (!ret) return ret;
     return ret;
  }
  public override int GetHashCode() {
    int result = 17;
    int ret;
    ret = (int)Rc;
    result = 37*result + ret;
    ret = (int)Op;
    result = 37*result + ret;
    ret = Response.GetHashCode();
    result = 37*result + ret;
    return result;
  }
  public static string Signature() {
    return "Lop_result_t(iiB)";
  }
}
}

#region copyright
/*
*.NET基础开发框架
*Copyright (C) 。。。
*地址：git@github.com:gangzaicd/Ik.Framework.git
*作者：到大叔碗里来（大叔）
*QQ：397754531
*eMail：gangzaicd@163.com
*/
#endregion copyright
